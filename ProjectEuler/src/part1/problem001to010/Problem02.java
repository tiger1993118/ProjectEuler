/**Problem2.java
 * Even Fibonacci numbers
@author Tiger Xiu Yi yixiu17@gmail.com
Created on 2014-11-27
10:09:25 PM
 */
package part1.problem001to010;

import java.util.ArrayList;
import java.util.List;

/**
 * 
 * TODO Even Fibonacci numbers: Each new term in the Fibonacci sequence is
 * generated by adding the previous two terms. By starting with 1 and 2, the
 * first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * 
 * Solution:
 * Compute all the fibonaccis number below 4million and store them in a list
 * For all the fibonaccis number in the list, no need to loop throw all of them
 * The parity of Fibonacis number is following a pattern : O,O,E,O,O,E...
 * O stands for odd, E stands for Even, simply loop throught every 3 numbers
 * which are all the even fibonaccis numbers we need 
 * @author yi
 * 
 */
public class Problem02 {

	public List<Integer> fibonaccis;

	public Problem02() {
		fibonaccis = new ArrayList<Integer>();
		fibonaccis.add(1);
		fibonaccis.add(1);
		fibonaccisBelow4million();
	}
	
	public void fibonaccisBelow4million(){
		Integer bound = 4000000;
		if (fibonaccis.get(fibonaccis.size() - 1) < bound){
			Integer next = fibonaccis.get(fibonaccis.size() - 1)
					+ fibonaccis.get(fibonaccis.size() - 2);
			fibonaccis.add(next);
			fibonaccisBelow4million();
		} 
	}
	
	public Integer evenFN(Integer x) {
		Integer evenSum = 0;
		for (int index = 2; index < fibonaccis.size(); index += 3)
			evenSum += fibonaccis.get(index);
		
		return evenSum;
	}

	

	public static void main(String[] args) {
		Problem02 P2 = new Problem02();
		System.out.println(P2.evenFN(4000000));
	}
}
