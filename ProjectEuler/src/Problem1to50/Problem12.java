/**Problem12.java
@author Tiger Xiu Yi yixiu17@gmail.com
Created on2014-11-27
9:53:26 PM
 */
package Problem1to50;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TODO The sequence of triangle numbers is generated by adding the natural
 * numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * 
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 * 1,2,4,7,14,28 We can see that 28 is the first triangle number to have over
 * five divisors.
 * 
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 * 
 * Solution: 2 steps: 1. Compute nth Triangular number 2. Use my algorithm to
 * compute number of factors for every n, explain the algorithm as below: I.
 * Compute a list of all distinct prime factors of n II.Store each of prime
 * factor of n in a dictionary such that key is the prime factor, and value is
 * the times it appeared in n(e.g., {2:3}, in n, there is a factor 2^3 in n) the
 * dictionary like {f1:x1, f2:x2,...fn:xn} there is n key-value pairs III.
 * computer (x1+1)*(x2+2)*...(xn+1) and the answer is how many factors of n
 * 
 * @author Xiu Yi Tiger
 */
public class Problem12 {

	List<Integer> primes = new ArrayList<Integer>(); // to store distinct primes

	public Integer smallestOver500() {

		first500Primes();// compute first 500 primes, worst case use all of them

		Integer n = 3; // to store the n in the nth triangular number

		Integer tn = 3; // to store the nth triangular number

		Integer numberOfF = 1;// number of factors of current tn

		while (numberOfF < 500) {
			numberOfF = 1;
			tn = tn + n;
			Map<Integer, Integer> factors = getAllFactors(tn);
			// product of power of (every factor + 1)
			for (Integer t : factors.values()) {
				numberOfF *= (t + 1);
			}
			n++;
		}
		return tn;

	}

	/**
	 * Get a dictonary with all prime factors and their times of appearances
	 * 
	 * @param n
	 * @return
	 */
	public Map<Integer, Integer> getAllFactors(Integer n) {
		Map<Integer, Integer> factors = new HashMap<Integer, Integer>();
		for (Integer prime : primes) {
			Integer times = 1;
			// compute how many time prime factor appear
			while (n % prime == 0) {
				factors.put(prime, times);
				n = n / prime;
				times += 1;
			}
			if (n == 1) {
				return factors;
			}
		}

		return factors;
	}

	public void first500Primes() {
		Integer n = 499;
		Integer x = 3;
		// initially, add first prime number
		primes.add(2);
		while (n != 0) {
			boolean isPrime = true;
			for (Integer i = 0; i < primes.size(); i++) {
				// x is not a prime
				if (x % primes.get(i) == 0) {
					isPrime = false;
					i = primes.size();
				}
			}
			if (isPrime) {
				primes.add(x);
			}
			x++;
			n--;
		}
	}

	public static void main(String[] args) {
		Problem12 P12 = new Problem12();
		System.out.println(P12.smallestOver500());
	}
}
