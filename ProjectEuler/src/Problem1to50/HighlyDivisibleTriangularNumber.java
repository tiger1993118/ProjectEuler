/**HighlyDivisibleTriangularNumber.java
TODO Problem 12 
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
@author Tiger Yi <a href = "mailto:yixiu17@gmail.com">yixiu17@gmail.com</a>
Created on2014-11-27
4:58:42 PM
 */
package Problem1to50;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author Xiu Yi Tiger
 * 
 *         My solution include 2 steps: 1. Compute nth Triangular number 2. Use
 *         my algorithm to compute number of factors for every n, explain the
 *         algorithm as below: I. Compute a list of all distinct prime factors
 *         of n II.Store each of prime factor of n in a dictionary such that key
 *         is the prime factor, and value is the times it appeared in n(e.g.,
 *         {2:3}, in n, there is a factor 2^3 in n) the dictionary like {f1:x1,
 *         f2:x2,...fn:xn} there is n key-value pairs III. computer
 *         (x1+1)*(x2+2)*...(xn+1) and the answer is how many factors of n
 * 
 *         How do i come up the algorithm? i keep trying and trying to this
 *         simplest algorithm i could come up with
 */
public class HighlyDivisibleTriangularNumber {

	public Integer n = 3; // to store the n in the nth triangular number

	List<Integer> primes = new ArrayList<Integer>(); // to store distinct primes

	public Integer smallestOver500() {

		first500Primes();// compute first 500 primes, worst case use all of them

		Integer tn = 3; // to store the nth triangular number

		while (numberOfFactors(tn) < 500) {
			tn = nextTriangluarNumber(tn);
		}
		return tn;

	}

	/**
	 * most important part in algorithm, mupltply (fx + 1) for the times of
	 * every factor
	 * 
	 * @param current
	 *            triangular number
	 * @return number of all factors
	 */
	public Integer numberOfFactors(Integer tn) {
		Integer ret = 1;
		Map<Integer, Integer> factors = getAllFactors(tn);

		for (Integer t : factors.values()) {
			ret *= (t + 1);
		}

		return ret;
	}

	/**
	 * Get a dictonary with all prime factors and their times of appearances
	 * 
	 * @param n
	 * @return
	 */
	public Map<Integer, Integer> getAllFactors(Integer n) {
		Map<Integer, Integer> factors = new HashMap<Integer, Integer>();
		for (Integer prime : primes) {
			Integer times = 1;
			// compute how many time prime factor appear
			while (n % prime == 0) {
				factors.put(prime, times);
				n = n / prime;
				times += 1;
			}
			if (n == 1) {
				return factors;
			}
		}

		return factors;
	}

	/**
	 * Compute first 500 distinct prime number
	 */
	public void first500Primes() {
		Integer n = 499;
		Integer x = 3;
		// initially, add first prime number
		primes.add(2);
		while (n != 0) {
			boolean isPrime = true;
			for (Integer i = 0; i < primes.size(); i++) {
				// x is not a prime
				if (x % primes.get(i) == 0) {
					isPrime = false;
					i = primes.size();
				}
			}
			if (isPrime) {
				primes.add(x);
			}
			x++;
			n--;
		}
	}

	/**
	 * 
	 * @param Integer
	 *            current Triangluar number
	 * @return next Triangluar Number
	 */
	public Integer nextTriangluarNumber(Integer tn) {
		tn = tn + n;
		this.n = this.n + 1;
		return tn;
	}
}
